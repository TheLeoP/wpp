name: Build/release

on:
  push:
    branches: [main]

env:
  NODE_VERSION: '22.x'

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install dependencies
        run: pnpm install

      - name: Build and release on Mac
        if: startsWith(matrix.os, 'macOS')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pnpm run publish:mac

      - name: Build and release on Linux
        if: startsWith(matrix.os, 'ubuntu')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}
        run: |
          pnpm run publish:linux

      - name: Build and release on Windows
        if: startsWith(matrix.os, 'windows')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pnpm run publish:win

  release:
    runs-on: ubuntu-latest
    name: Release join-desktop
    if: github.ref == 'refs/heads/main'
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install dependencies
        run: pnpm install

      - name: Get version
        run: |
          echo "VERSION_TAG=v$(node -pe "require('./package.json').version")" >> $GITHUB_ENV

      - name: Check if version already exists in tags
        run: |
          echo "VERSION_HASH=$(git rev-parse -q --verify 'refs/tags/${{ env.VERSION_TAG }}')" >> $GITHUB_ENV
          echo "CHANGELOG_ANCHOR=$(echo $VERSION_TAG | sed -e 's/\.//g')" >> $GITHUB_ENV

      - name: Fetch draft release
        if: ${{ env.VERSION_HASH == '' }}
        uses: cardinalby/git-get-release-action@v1
        id: get_draft_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          latest: true
          draft: true
          searchLimit: 1

      - name: Publish Release (if it does not exist)
        if: ${{ env.VERSION_HASH == '' }}
        uses: irongut/EditRelease@v1.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          id: ${{ steps.get_draft_release.outputs.id }}
          draft: false
          prerelease: false
          replacename: true
          name: ${{ env.VERSION_TAG }}
          replacebody: true
